{"title": "How does the Amazon Recommendation feature work?", "question": {"text": "\nWhat technology goes in behind the screens of Amazon recommendation technology? I believe that Amazon recommendation is currently the best in the market, but how do they provide us with such relevant recommendations?\nRecently, we have been involved with similar recommendation kind of project, but would surely like to know about the in and outs of the Amazon recommendation technology from a technical standpoint. \nAny inputs would be highly appreciated. \nUpdate:\nThis  explains how personalized recommendations are done but it is not very technical, and so it would be really nice if some insights could be provided. \nFrom the comments of Dave,  forms the basis for such kind of Recommendation Engines. Also here are some good reads on the Topic\n\n\n\n\n\nSuggested Reading:\n\n\n\n", "comments": ["Did you try sifting through their pile of patents? ", "Yes I did going through the Patent but it is not very technical and so would appreciate some insights on technical aspect of the mechanism", "@Dave: This question is open now and I would really appreciate if you can give some more insights on the technology behind recommendation engine architecture and functionality which Amazon uses for providing recommendations.", "I wouldn't call Amazon recommendation system \"the best\" or even useful. You order a mouse, it suggests to buy another one as well. Why would a normal user need two mice at once???", "@Rachel: Given that you know Amazon's system is patented and you want to develop something similar, I would not even glance at their patents---and of course not looking at them doesn't protect you either, but it's a start."]}, "answers": [{"text": "\nIt is both an art and a science.  Typical fields of study revolve around market basket analysis (also called affinity analysis) which is a subset of the field of data mining.  Typical components in such a system include identification of primary driver items and the identification of affinity items (accessory upsell, cross sell).    \nKeep in mind the data sources they have to mine...  \n\nPurchased shopping carts = real money from real people spent on real items = powerful data and a lot of it.  \nItems added to carts but abandoned.  \nPricing experiments online (A/B testing, etc.) where they offer the same products at different prices and see the results  \nPackaging experiments (A/B testing, etc.) where they offer different products in different \"bundles\" or discount various pairings of items  \nWishlists - what's on them specifically for you - and in aggregate it can be treated similarly to another stream of basket analysis data  \nReferral sites (identification of where you came in from can hint other items of interest)  \nDwell times (how long before you click back and pick a different item)  \nRatings by you or those in your social network/buying circles - if you rate things you like you get more of what you like and if you confirm with the \"i already own it\" button they create a very complete profile of you  \nDemographic information (your shipping address, etc.) - they know what is popular in your general area for your kids, yourself, your spouse, etc.  \nuser segmentation = did you buy 3 books in separate months for a toddler?  likely have a kid or more.. etc.  \nDirect marketing click through data - did you get an email from them and click through?  They know which email it was and what you clicked through on and whether you bought it as a result.  \nClick paths in session - what did you view regardless of whether it went in your cart\nNumber of times viewed an item before final purchase  \nIf you're dealing with a brick and mortar store they might have your physical purchase history to go off of as well (i.e. toys r us or something that is online and also a physical store)\netc. etc. etc.  \n\nLuckily people behave similarly in aggregate so the more they know about the buying population at large the better they know what will and won't sell and with every transaction and every rating/wishlist add/browse they know how to more personally tailor recommendations.  Keep in mind this is likely only a small sample of the full set of influences of what ends up in recommendations, etc.  \nNow I have no inside knowledge of how Amazon does business (never worked there) and all I'm doing is talking about classical approaches to the problem of online commerce - I used to be the PM who worked on data mining and analytics for the Microsoft product called Commerce Server.  We shipped in Commerce Server the tools that allowed people to build sites with similar capabilities.... but the bigger the sales volume the better the data the better the model - and Amazon is BIG.  I can only imagine how fun it is to play with models with that much data in a commerce driven site.  Now many of those algorithms (like the predictor that started out in commerce server) have moved on to live directly within .\nThe four big take-a-ways you should have are:  \n\nAmazon (or any retailer) is looking at aggregate data for tons of transactions and tons of people... this allows them to even recommend pretty well for anonymous users on their site.  \nAmazon (or any sophisticated retailer) is keeping track of behavior and purchases of anyone that is logged in and using that to further refine on top of the mass aggregate data.  \nOften there is a means of over riding the accumulated data and taking \"editorial\" control of suggestions for product managers of specific lines (like some person who owns the 'digital cameras' vertical or the 'romance novels' vertical or similar) where they truly are experts  \nThere are often promotional deals (i.e. sony or panasonic or nikon or canon or sprint  or verizon pays additional money to the retailer, or gives a better discount at larger quantities or other things in those lines) that will cause certain \"suggestions\" to rise to the top more often than others - there is always some reasonable business logic and business reason behind this targeted at making more on each transaction or reducing wholesale costs, etc.  \n\nIn terms of actual implementation?  Just about all large online systems boil down to some set of pipelines (or a filter pattern implementation or a workflow, etc.  you call it what you will) that allow for a context to be evaluated by a series of modules that apply some form of business logic.  \nTypically a different pipeline would be associated with each separate task on the page - you might have one that does recommended \"packages/upsells\" (i.e. buy this with the item you're looking at) and one that does \"alternatives\" (i.e. buy this instead of the thing you're looking at) and another that pulls items most closely related from your wish list (by product category or similar).  \nThe results of these pipelines are able to be placed on various parts of the page (above the scroll bar, below the scroll, on the left, on the right, different fonts, different size images, etc.) and tested to see which perform best.  Since you're using nice easy to plug and play modules that define the business logic for these pipelines you end up with the moral equivalent of lego blocks that make it easy to pick and choose from the business logic you want applied when you build another pipeline which allows faster innovation, more experimentation, and in the end higher profits.  \nDid that help at all?  Hope that give you a little bit of insight how this works in general for just about any ecommerce site - not just Amazon.  Amazon (from talking to friends that have worked there) is very data driven and continually measures the effectiveness of it's user experience and the pricing, promotion, packaging, etc. - they are a very sophisticated retailer online and are likely at the leading edge of a lot of the algorithms they use to optimize profit - and those are likely proprietary secrets (you know like the formula to KFC's secret spices) and guaarded as such.\n", "comments": ["Yes. It did helped me alot and I really appreciate your inputs on the topic.", "amazing insights"]}, {"text": "\nThis isn't directly related to Amazon's recommendation system, but it might be helpful to study the methods used by people who competed in the , a contest to develop a better recommendation system using Netflix user data. A lot of good information exists in their  about data mining techniques in general. \nThe team that won used a blend of the recommendations generated by a lot of different models/techniques. I know that some of the main methods used were principal component analysis, nearest neighbor methods, and neural networks. Here are some papers by the winning team:\nR. Bell, Y. Koren, C. Volinsky, \"\", (2008).\nA. Töscher, M. Jahrer, “\", (2008).\nA. Töscher, M. Jahrer, R. Legenstein, \"\",  SIGKDD Workshop on Large-Scale Recommender Systems and the Netflix Prize Competition  (KDD’08) , ACM Press (2008).\nY. Koren, \"\", (2009).\nA. Töscher, M. Jahrer, R. Bell, \"\", (2009).\nM. Piotte, M. Chabbert, \"\", (2009).\nThe 2008 papers are from the first year's Progress Prize. I recommend reading the earlier ones first because the later ones build upon the previous work.\n", "comments": ["What I like about this answer is that it points to the fact that there is no \"perfect\" answer and that people keep innovating in this area - there is always some room for improvement and as times change and new methods are applied to the problems it will keep getting solved differently.  And if you read the detailed links you can see how there is a \"blend\" of several approches to prediction within each of the big contenders for the prize.  Great references."]}, {"text": "\nI bumped on this paper today:\n\n\n\nMaybe it provides additional information.\n", "comments": []}, {"text": "\n(Disclamer: I used to work at Amazon, though I didn't work on the recommendations team.)\newernli's answer should be the correct one -- the paper links to Amazon's original recommendation system, and from what I can tell (both from personal experience as an Amazon shopper and having worked on similar systems at other companies), very little has changed: at its core, Amazon's recommendation feature is still very heavily based on item-to-item collaborative filtering.\nJust look at what form the recommendations take: on my front page, they're all either of the form \"You viewed X...Customers who also viewed this also viewed...\", or else a melange of items similar to things I've bought or viewed before. If I specifically go to my \"Recommended for You\" page, every item describes why it's recommended for me: \"Recommended because you purchased...\", \"Recommended because you added X to your wishlist...\", etc. This is a classic sign of item-to-item collaborative filtering.\nSo how does item-to-item collaborative filtering work? Basically, for each item, you build a \"neighborhood\" of related items (e.g., by looking at what items people have viewed together or what items people have bought together -- to determine similarity, you can use metrics like the ; correlation is another possibility, though I suspect Amazon doesn't use ratings data very heavily). Then, whenever I view an item X or make a purchase Y, Amazon suggests me things  in the same neighborhood as X or Y.\nSome other approaches that Amazon could potentially use, but likely doesn't, are described here: \nA lot of what Dave describes is almost certainly not done at Amazon. (Ratings by those in my social network? Nope, Amazon doesn't have any of my social data. This would be a massive privacy issue in any case, so it'd be tricky for Amazon to do even if they had that data: people don't want their friends to know what books or movies they're buying. Demographic information? Nope, nothing in the recommendations suggests they're looking at this. [Unlike Netflix, who does surface what other people in my area are watching.])\n", "comments": ["Amazon for years exposed purchase circles - which were anonymized buying trends based on company domain name and zip code.  There had to be at least 50 distinct buyers in a purchase circle before you could get information about it - so amazon certainly did keep, track and use that information to help themselves (and others) understand what was popular.  You could look at cds, electronics, and book purchases in your area or at your company.  They were exposed from 1999-2002.   even has a copy and paste of the text from amazon describing them."]}, {"text": "\nI don't have any knowledge of Amazon's algorithm specifically, but one component of such an algorithm would probably involve tracking groups of items frequently ordered together, and then using that data to recommend other items in the group when a customer purchases some subset of the group.\nAnother possibility would be to track the frequency of item B being ordered within N days after ordering item A, which could suggest a correlation.\n", "comments": []}, {"text": "\nAs far I know, it's use  as an engine for it.\nYou can see in this sources: ,  and .\nThere are many sources in google searching for amazon and case-based reasoning.\n", "comments": []}, {"text": "\nSomeone did a presentation at our University on something similar last week, and referenced the Amazon recommendation system. I believe that it uses a form of  to cluster people into their different buying habits. Hope this helps :)\nCheck this out too:  and .\n", "comments": []}, {"text": "\nIf you want a hands-on tutorial (using open-source R) then you could do worse than going through this:\n\nIt is a run-time optimised version of another piece of work: \n\nHowever, the variation of the code on the first link runs MUCH faster so I recommend using that (I found the only slow part of yoshiki146's code is the final routine which generates the recommendation at user level - it took about an hour with my data on my machine). \nI adapted this code to work as a recommendation engine for the retailer I work for.\nThe algorithm used is - as others have said above - collaborative filtering. This method of CF calculates a cosine similarity matrix and then sorts by that similarity to find the 'nearest neighbour' for each element (music band in the example given, retail product in my application).\nThe resulting table can recommend a band/product based on another chosen band/product.\nThe next section of the code goes a step further with USER (or customer) based collaborative filtering.\nThe output of this is a large table with the top 100 bands/products recommended for a given user/customer\n", "comments": ["While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes. - ", "True...   The algorithm used is - as others have said above - collaborative filtering. This method of CF calculates a cosine similarity matrix and then sorts by that similarity to find the 'nearest neighbour' for each element (music band in the example given, retail product in my application).  The resulting table can recommend a band/product based on another chosen band/product.  The next section of the code goes a step further with USER (or customer) based collaborative filtering. The output of this is a large table with the top 100 bands/products recommended for a given user/customer", "please edit you answer and add this information there, not in comments section, thanks"]}]}